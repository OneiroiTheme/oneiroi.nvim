local M = {}

---@type oneiroi.hler
function M.get(c, opts)
	local bg = opts.transparent and c.none or c.bg
	local bg2 = c.bg2
	local bgSta = c.bg2
	local vis = c.primary_s
	local border = c.bg3
	local borderHL = c.primary
	local search = c.diagInfo
	local search_h = c.tertiary
	return {
		Foo = { fg = c.fg, bg = c.bg },
		Err = { fg = c.err, bold = true },
		Warn = { fg = c.war, bold = true },
		Border = { fg = border },
		SpecialKey = { fg = c.primary_s },
		EndOfBuffer = { fg = c.bg },
		TermCursor = "Cursor",
		TermCursorNC = {},
		-- NonText = "NONE"
		Directory = { fg = c.primary_s },
		ErrorMsg = "Err",
		IncSearch = "CurSearch",
		Search = { fg = search, bg = c.bg, reverse = true },
		CurSearch = { fg = search_h, bg = c.bg, reverse = true },
		MoreMsg = { fg = c.primary },
		ModeMsg = { fg = c.primary, bold = true },
		LineNr = { fg = c.primary_s },
		LineNrAbove = "LineNr",
		LineNrBelow = "LineNr",
		CursorLineNr = { fg = c.secondary },
		CursorLineSign = "SignColumn",
		CursorLineFold = "FoldColumn",
		Question = { fg = c.tertiary },
		StatusLine = { fg = c.fg, bg = bgSta },
		StatusLineNC = { fg = c.muted, bg = bgSta },
		WinSeparator = "Border",
		VertSplit = "WinSeparator",
		Title = { fg = c.secondary, bold = true },
		Visual = { fg = vis, bg = c.bg, reverse = true },
		VisualNC = {},
		WarningMsg = "Warn",
		WildMenu = "PmenuSel",
		Folded = { fg = c.muted, bg = bg2 },
		FoldColumn = "SignColumn",
		DiffAdd = { fg = c.diffAdd, bg = c.bg, reverse = true },
		DiffChange = { fg = c.diffChange, bg = c.bg, reverse = true },
		DiffDelete = { fg = c.diffDelete, bg = bg },
		DiffText = { fg = c.diffText, bg = c.bg, reverse = true },
		SignColumn = { fg = c.muted_s },
		Conceal = { fg = c.muted },
		SpellBad = { sp = c.diagError, undercurl = true },
		SpellCap = { sp = c.diagWarning, undercurl = true },
		SpellLocal = { sp = c.diagInfo, undercurl = true },
		SpellRare = { sp = c.diagHint, undercurl = true },
		Pmenu = { fg = c.fg, bg = bg2 },
		PmenuSel = { fg = c.bg2, bg = c.primary_s },
		PmenuKind = "Pmenu",
		PmenuKindSel = "PmenuSel",
		PmenuExtra = "Pmenu",
		PmenuExtraSel = "PmenuSel",
		PmenuSbar = { bg = bg2 },
		PmenuThumb = { bg = border },
		TabLine = { fg = c.muted, bg = bgSta },
		TabLineSel = { fg = c.secondary, bg = bg },
		TabLineFill = { bg = bgSta },
		CursorColumn = { bg = bg2 },
		CursorLine = { bg = bg2 },
		ColorColumn = { bg = bg2 },
		QuickFixLine = { bg = bg, bold = true },
		Whitespace = "NonText",
		NormalNC = {},
		MsgSeparator = "StatusLine",
		NormalFloat = "NormalSB",
		MsgArea = {},
		FloatBorder = "Border",
		WinBar = "StatusLine",
		WinBarNC = "StatusLineNC",
		Cursor = { fg = c.primary, bg = c.bg, reverse = true },
		FloatTitle = "Title",
		FloatFooter = "FloatTitle",
		RedrawDebugNormal = { reverse = true },
		Underlined = { underline = true },
		lCursor = "Cursor",
		CursorIM = "Cursor",
		Substitute = "Search",
		VisualNOS = "Visual",
		Normal = { fg = c.fg, bg = bg },
		Character = "Constant",
		Constant = { fg = c.secondary },
		Number = "Constant",
		Boolean = "Constant",
		Float = "Number",
		Conditional = { fg = c.quaternary },
		Statement = { fg = c.primary },
		Repeat = "Conditional",
		Label = "Statement",
		Keyword = "Statement",
		Exception = "Statement",
		Include = "PreProc",
		PreProc = { fg = c.tertiary },
		["@preproc"] = "PreProc",
		Define = "PreProc",
		Macro = "PreProc",
		PreCondit = "PreProc",
		StorageClass = "Type",
		Type = { fg = c.primary },
		Structure = "Type",
		Typedef = "Type",
		Tag = "Special",
		Special = { fg = c.primary },
		SpecialChar = "Special",
		SpecialComment = "Special",
		Debug = "Special",
		Ignore = "Normal",
		LspCodeLens = "NonText",
		LspCodeLensSeparator = "LspCodeLens",
		LspInlayHint = "NonText",
		LspReferenceRead = "LspReferenceText",
		LspReferenceText = "Visual",
		LspReferenceWrite = "LspReferenceText",
		LspSignatureActiveParameter = { bg = c.muted, bold = true },
		LspInfoBorder = { fg = borderHL, bg = bg },
		SnippetTabstop = "Visual",
		DiagnosticError = { fg = c.diagError },
		DiagnosticWarn = { fg = c.diagWarning },
		DiagnosticInfo = { fg = c.diagInfo },
		DiagnosticHint = { fg = c.diagHint },
		DiagnosticOk = { fg = c.diagSuccess },
		DiagnosticUnnecessary = "Comment",
		Comment = { fg = c.com },
		String = "Constant",
		Identifier = "Normal",
		Function = { fg = c.tertiary },
		Operator = "keyword",
		Delimiter = { fg = c.quinary },
		Todo = { fg = c.diagInfo, bg = c.bg, reverse = true },
		Added = { fg = c.diffAdd },
		Removed = { fg = c.diffDelete },
		Changed = { fg = c.diffChange },
		-- FloatShadow
		-- FloatShadowThrough
		-- MatchParen
		-- RedrawDebugClear
		-- RedrawDebugComposed
		-- RedrawDebugRecompose
		-- Error
		DiagnosticUnderlineError = { fg = c.diagError, underline = true },
		DiagnosticUnderlineWarn = { fg = c.diagWarning, underline = true },
		DiagnosticUnderlineInfo = { fg = c.diagInfo, underline = true },
		DiagnosticUnderlineHint = { fg = c.diagHint, underline = true },
		DiagnosticUnderlineOk = { fg = c.diagSuccess, underline = true },
	}
end

return M
